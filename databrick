Parte 1: Módulo de Terraform (AzNativeServices)
Este es el módulo reutilizable que vivirá en tu repositorio central AzNativeServices.
Estructura de Archivos
Dentro de tu repositorio, crearás la siguiente estructura de carpetas y archivos:
AzNativeServices/ └── Mod_AzDatabricks_Native/     ├── main.tf     ├── variables.tf     └── outputs.tf 
Mod_AzDatabricks_Native/main.tf
Este archivo contiene la lógica principal para crear el espacio de trabajo de Azure Databricks y su Private Endpoint. Utiliza data sources para obtener información de los recursos de red que ya existen, tal como lo solicitaste.
# --- main.tf en Mod_AzDatabricks_Native ---  # Obtiene datos del grupo de recursos existente donde vivirá Databricks. data "azurerm_resource_group" "rg_databricks" {   name = var.resource_group_name }  # Obtiene datos de las subnets existentes para la inyección de VNet en Databricks. data "azurerm_subnet" "databricks_public_subnet" {   name                 = var.databricks_public_subnet_name   virtual_network_name = var.databricks_vnet_name   resource_group_name  = var.databricks_vnet_rg_name }  data "azurerm_subnet" "databricks_private_subnet" {   name                 = var.databricks_private_subnet_name   virtual_network_name = var.databricks_vnet_name   resource_group_name  = var.databricks_vnet_rg_name }  # Obtiene datos de la subnet existente para el Private Endpoint. data "azurerm_subnet" "private_endpoint_subnet" {   name                 = var.private_endpoint_subnet_name   virtual_network_name = var.private_endpoint_vnet_name   resource_group_name  = var.private_endpoint_vnet_rg_name }  # --- Creación del Workspace de Azure Databricks --- # Este recurso despliega el workspace con la configuración de red segura. resource "azurerm_databricks_workspace" "databricks_ws" {   name                          = var.workspace_name   resource_group_name           = data.azurerm_resource_group.rg_databricks.name   location                      = data.azurerm_resource_group.rg_databricks.location   sku                           = var.sku   managed_resource_group_name   = var.managed_resource_group_name   public_network_access_enabled = false # Clave para deshabilitar el acceso público.    # Parámetros personalizados para la inyección en la VNet.   custom_parameters {     no_public_ip                               = true # No asigna IPs públicas a los nodos del clúster.     public_subnet_name                         = data.azurerm_subnet.databricks_public_subnet.name     private_subnet_name                        = data.azurerm_subnet.databricks_private_subnet.name     virtual_network_id                         = data.azurerm_subnet.databricks_public_subnet.virtual_network_id   }    tags = var.tags }  # --- Creación del Private Endpoint --- # Este recurso asegura que el acceso al workspace sea únicamente a través de tu red privada. resource "azurerm_private_endpoint" "databricks_pe" {   name                = "${var.workspace_name}-pe"   resource_group_name = data.azurerm_resource_group.rg_databricks.name   location            = data.azurerm_resource_group.rg_databricks.location   subnet_id           = data.azurerm_subnet.private_endpoint_subnet.id    # Conexión al servicio de Databricks.   private_service_connection {     name                           = "${var.workspace_name}-psc"     is_manual_connection           = false     private_connection_resource_id = azurerm_databricks_workspace.databricks_ws.id     # El sub-recurso "databricks_ui_api" es específico para el workspace.     subresource_names              = ["databricks_ui_api"]   }    # Integración con DNS privado para la resolución de nombres.   private_dns_zone_group {     name                 = "default"     private_dns_zone_ids = [var.private_dns_zone_id_databricks]   }    tags = var.tags } 
Mod_AzDatabricks_Native/variables.tf
Aquí se definen todas las variables de entrada para que el módulo sea flexible y reutilizable.
# --- variables.tf en Mod_AzDatabricks_Native ---  variable "resource_group_name" {   type        = string   description = "Nombre del grupo de recursos donde se creará el Databricks." }  variable "workspace_name" {   type        = string   description = "Nombre para el espacio de trabajo de Databricks." }  variable "managed_resource_group_name" {   type        = string   description = "Nombre del grupo de recursos gestionado por Databricks." }  variable "sku" {   type        = string   default     = "premium"   description = "SKU para el workspace. 'premium' es requerido para Private Link y VNet Injection." }  variable "databricks_vnet_name" {   type        = string   description = "Nombre de la VNet para las subnets de Databricks." }  variable "databricks_vnet_rg_name" {   type        = string   description = "Nombre del grupo de recursos de la VNet de Databricks." }  variable "databricks_public_subnet_name" {   type        = string   description = "Nombre de la subnet pública para Databricks." }  variable "databricks_private_subnet_name" {   type        = string   description = "Nombre de la subnet privada para Databricks." }  variable "private_endpoint_vnet_name" {   type        = string   description = "Nombre de la VNet donde se creará el Private Endpoint." }  variable "private_endpoint_vnet_rg_name" {   type        = string   description = "Nombre del grupo de recursos de la VNet del Private Endpoint." }  variable "private_endpoint_subnet_name" {   type        = string   description = "Nombre de la subnet para el Private Endpoint." }  variable "private_dns_zone_id_databricks" {   type        = string   description = "ID de la Private DNS Zone para Databricks (privatelink.azuredatabricks.net)." }  variable "tags" {   type        = map(string)   default     = {}   description = "Etiquetas a aplicar a los recursos." } 
Mod_AzDatabricks_Native/outputs.tf
Define los valores importantes que el módulo devolverá al ser consumido.
# --- outputs.tf en Mod_AzDatabricks_Native ---  output "databricks_workspace_id" {   value       = azurerm_databricks_workspace.databricks_ws.id   description = "El ID del recurso del espacio de trabajo de Databricks." }  output "databricks_workspace_url" {   value       = azurerm_databricks_workspace.databricks_ws.workspace_url   description = "La URL para acceder al espacio de trabajo de Databricks." }  output "private_endpoint_id" {   value       = azurerm_private_endpoint.databricks_pe.id   description = "El ID del recurso del Private Endpoint creado para Databricks." } 
Parte 2: Consumidor del Módulo (CentroContactoDatos)
Este es un ejemplo de cómo llamarías al módulo desde tu repositorio CentroContactoDatos para desplegar la infraestructura.
main.tf (en CentroContactoDatos)
# --- main.tf en el proyecto CentroContactoDatos ---  terraform {   required_providers {     azurerm = {       source  = "hashicorp/azurerm"       version = "~>3.0"     }   } }  provider "azurerm" {   features {} }  # --- Data Sources --- # Es una buena práctica obtener los IDs de forma dinámica. # Aquí obtenemos la Private DNS Zone que es necesaria para el Private Endpoint. # Asegúrate de que esta zona ya exista. data "azurerm_private_dns_zone" "databricks_dns" {   name                = "privatelink.azuredatabricks.net"   # Asumo que la zona DNS vive en el mismo RG que la VNet del PE. Ajusta si es necesario.   resource_group_name = "z-nsm-ccint-pp01-ue2-01"  }   # --- Llamada al Módulo de Databricks --- module "databricks_contact_center" {   # IMPORTANTE: Reemplaza la URL con la de tu repositorio de GitHub.   # El uso de `?ref=v1.0.0` permite anclar una versión específica del módulo.   source = "git::https://github.com/tu-organizacion/AzNativeServices.git//Mod_AzDatabricks_Native?ref=v1.0.0"    # Asignación de valores a las variables del módulo con tus nombres específicos.   resource_group_name           = "z-nsm-contactcenter-pp01-ue2-01"   workspace_name                = "dbrk-contactcenter-pp01-ue2-01" # Nombre sugerido   managed_resource_group_name   = "z-nsm-contactcenter-pp01-ue2-01-dbmng"      databricks_vnet_name          = "znsmccentercintpp01eu2net01"   databricks_vnet_rg_name       = "z-nsm-ccentercint-pp01-ue2-01"   databricks_public_subnet_name = "databrickspub64-pic-rt"   # NOTA: El nombre de la subnet privada era igual a la pública en tu solicitud.    # He asumido que es un error tipográfico y lo he corregido. Por favor, verifica el nombre correcto.   databricks_private_subnet_name = "databrickspriv64-pic-rt"     private_endpoint_vnet_name    = "znsmccintpp01ue2net01"   private_endpoint_vnet_rg_name = "z-nsm-ccint-pp01-ue2-01"   private_endpoint_subnet_name  = "main-pic-rt"      private_dns_zone_id_databricks = data.azurerm_private_dns_zone.databricks_dns.id    tags = {     Proyecto = "CentroContactoDatos"     Ambiente = "Piloto-Produccion"     Owner    = "EquipoDeDatos"   } }  # --- Salidas del Proyecto --- # Muestra información útil después de aplicar los cambios. output "url_databricks_centro_contacto" {   value       = module.databricks_contact_center.databricks_workspace_url   description = "URL de acceso al workspace de Databricks para el Centro de Contacto." } 
Consideraciones Importantes
	•	Autenticación a GitHub: Si tu repositorio AzNativeServices es privado, Terraform necesitará autenticarse. La forma más común es configurar un token de acceso personal (PAT) de GitHub y usarlo en tu configuración de Git.
	•	Versionado de Módulos: Como se muestra en el ejemplo (?ref=v1.0.0), siempre apunta a una etiqueta (tag) o commit específico de Git en la source de tu módulo. Esto evita que cambios inesperados en el módulo afecten tus despliegues.
	•	Zona DNS Privada: El Private Endpoint no funcionará correctamente sin una Private DNS Zone (privatelink.azuredatabricks.net) y un VNet Link a la red virtual donde residen los recursos que consumirán Databricks. El código asume que esta zona ya existe.
Con esta implementación, tendrás una base sólida y profesional para gestionar tus recursos de Azure con Terraform.
